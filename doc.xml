<haxe>
	<class path="neko.Lib" params="" file="/opt/haxe/std/neko/Lib.hx">
		<load public="1" set="method" line="29" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Load and return a Neko primitive from a NDLL library.</haxe_doc>
		</load>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Array" params="T" file="/opt/haxe/std/neko/_std/Array.hx">
		<new1 params="T" set="method" line="32" static="1"><f a="a:l">
	<c path="neko.NativeArray"><c path="new1.T"/></c>
	<x path="Int"/>
	<c path="Array"><c path="new1.T"/></c>
</f></new1>
		<__a><c path="neko.NativeArray"><c path="Array.T"/></c></__a>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method" line="39">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<copy public="1" set="method" line="50">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method" line="54">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<insert public="1" set="method" line="69">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<join public="1" set="method" line="82">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<toString public="1" set="method" line="94">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<pop public="1" set="method" line="107">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method" line="116">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<unshift public="1" set="method" line="123">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<remove public="1" set="method" line="131">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method" line="148">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurense of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="165">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurense of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<reverse public="1" set="method" line="182">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method" line="196">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method" line="209">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method" line="226">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method" line="249">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<map public="1" params="S" set="method" line="272">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method" line="279">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<__get set="method" line="290"><f a="pos">
	<x path="Int"/>
	<c path="Array.T"/>
</f></__get>
		<__set set="method" line="294"><f a="pos:v">
	<x path="Int"/>
	<c path="Array.T"/>
	<c path="Array.T"/>
</f></__set>
		<__grow set="method" line="315"><f a="l">
	<x path="Int"/>
	<x path="Void"/>
</f></__grow>
		<__neko set="method" line="330"><f a=""><c path="neko.NativeArray"><c path="Array.T"/></c></f></__neko>
		<new public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/opt/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/opt/haxe/std/neko/_std/Date.hx">
		<fromTime public="1" set="method" line="73" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" line="81" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a Date from a formated string `s`, with the following accepted
		formats:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<new1 set="method" line="85" static="1"><f a="t">
	<d/>
	<c path="Date"/>
</f></new1>
		<date_new line="91" static="1"><f a="">
	<unknown/>
	<unknown/>
</f></date_new>
		<date_format line="93" static="1"><f a=":">
	<d/>
	<unknown/>
	<c path="String"/>
</f></date_format>
		<date_set_hour line="94" static="1"><f a=":::">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></date_set_hour>
		<date_set_day line="95" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></date_set_day>
		<int32_to_float line="98" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></int32_to_float>
		<int32_add line="99" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<unknown/>
</f></int32_add>
		<int32_shl line="100" static="1"><f a=":">
	<unknown/>
	<x path="Int"/>
	<unknown/>
</f></int32_shl>
		<__string set="method" line="101" static="1">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
		</__string>
		<__t><d/></__t>
		<getTime public="1" set="method" line="33">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It might only have a per-second
		precision depending on the platforms.</haxe_doc>
		</getTime>
		<toString public="1" set="method" line="65">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method" line="28">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There is some extra functions available in the `DateTools` class.

	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="/opt/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/opt/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="List" params="T" file="/opt/haxe/std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="49">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<new public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole array content every time.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="_List.ListIterator" params="T" file="/opt/haxe/std/List.hx" private="1" module="List">
		<head><c path="Array"><d/></c></head>
		<val><d/></val>
		<hasNext public="1" get="inline" set="null" line="249"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="253"><f a=""><c path="_List.ListIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="244"><f a="head">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="Map" params="K:V" file="/opt/haxe/std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><t path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</t></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
		<meta><m n=":multiType"><e>K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="/opt/haxe/std/Map.hx" private="1" module="Map"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="IMap" params="K:V" file="/opt/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="Math" params="" file="/opt/haxe/std/neko/_std/Math.hx">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with `NaN` on Windows,
		see [https://bugs.php.net/bug.php?id=42143]</haxe_doc>
		</NaN>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<min public="1" set="method" line="31" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" line="32" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<floor public="1" set="method" line="43" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" line="44" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<__rnd static="1"><unknown/></__rnd>
		<isNaN public="1" set="method" line="60" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<isFinite public="1" set="method" line="61" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<class path="Reflect" params="" file="/opt/haxe/std/neko/_std/Reflect.hx">
		<callMethod public="1" set="method" line="49" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="61" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="81" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Int" params="" file="/opt/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard Int type. Its precision depends on the platform.

	On static targets, null cannot be assigned to Int. If this is necessary,
	`Null<Int>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Float" params="" file="/opt/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard Float type, this is a double-precision IEEE 64bit float.

	On static targets, null cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/opt/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be true or false.

	On static targets, null cannot be assigned to Bool. If this is necessary,
	`Null<Bool>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/opt/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>Dynamic is a special type which is compatible with all other types.

	Use of Dynamic should be minimized as it prevents several compiler
	checks and optimizations.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="neko.Boot" params="" file="/opt/haxe/std/neko/Boot.hx">
		<__tmp_str set="method" line="27" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
		</__tmp_str>
		<__enum_str set="method" line="31" static="1">
			<f a="e">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__enum_str>
		<__interfLoop set="method" line="53" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="69" static="1">
			<f a="o:cl">
				<a>
					<__name__ set="null"><unknown/></__name__>
					<__enum__ set="null"><t path="Abstract&lt;Dynamic&gt;"/></__enum__>
					<__ename__ set="null"><unknown/></__ename__>
					<__class__ set="null"><unknown/></__class__>
				</a>
				<t path="Abstract&lt;Dynamic&gt;"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"typed_catch"</e></m>
			</meta>
		</__instanceof>
		<__serialize set="method" line="87" static="1">
			<f a="o">
				<a>
					<__enum__ set="null"><a><__ename__ set="null"><a><length set="null"><x path="Int"/></length></a></__ename__></a></__enum__>
					<__class__ set="null"><a><__name__ set="null"><a><length set="null"><x path="Int"/></length></a></__name__></a></__class__>
				</a>
				<c path="Array"><unknown/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__serialize>
		<__tagserialize set="method" line="107" static="1">
			<f a="o">
				<a>
					<tag set="null"><unknown/></tag>
					<__enum__ set="null"><a><__ename__ set="null"><a><length set="null"><x path="Int"/></length></a></__ename__></a></__enum__>
				</a>
				<c path="Array"><unknown/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__tagserialize>
		<__unserialize set="method" line="116" static="1">
			<f a="v">
				<c path="Array"><unknown/></c>
				<unknown/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__unserialize>
		<__init set="method" line="139" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</__init>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="Std" params="" file="/opt/haxe/std/neko/_std/Std.hx">
		<is public="1" set="method" line="25" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"typed_cast"</e></m>
			</meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.</haxe_doc>
		</is>
		<string public="1" set="method" line="33" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="37" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseFloat public="1" set="method" line="53" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/opt/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard Void type. Only `null` values can be of the type `Void`.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<typedef path="Null" params="T" file="/opt/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accepts or can return a `null` value, or for the Flash compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<typedef path="Iterator" params="T" file="/opt/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.

		This method is not required to check `hasNext` first. A call to this
		method while `hasNext` is false yields unspecified behavior.

		On the other hand iterators should not require a call to `hasNext`
		before the first call to `next` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/opt/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See `Lambda` for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/opt/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="/opt/haxe/std/neko/_std/String.hx">
		<__is_String static="1"><x path="Bool"/></__is_String>
		<__split line="25" static="1"><d/></__split>
		<fromCharCode public="1" set="method" line="200" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<charAt public="1" set="method" line="42">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method" line="54">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method" line="60">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="69">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method" line="84">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.

		If `this` String is the empty String "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String "", `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<substr public="1" set="method" line="100">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method" line="126">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<toLowerCase public="1" set="method" line="150">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<toUpperCase public="1" set="method" line="166">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toString public="1" set="method" line="182">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<__compare set="method" line="188">
			<f a="o">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__compare>
		<__add set="method" line="192">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__add>
		<__radd set="method" line="196">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__radd>
		<new public="1" set="method" line="33">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the string literal syntax "string value".

	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<class path="StringBuf" params="" file="/opt/haxe/std/neko/_std/StringBuf.hx">
		<__make line="52" static="1"><d/></__make>
		<__add line="53" static="1"><d/></__add>
		<__add_char line="54" static="1"><d/></__add_char>
		<__to_string line="56" static="1"><d/></__to_string>
		<b><d/></b>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="/opt/haxe/std/StringTools.hx">
		<endsWith public="1" set="method" line="153" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is null, the result is unspecified.

		If `end` is the empty String "", the result is true.</haxe_doc>
		</endsWith>
		<_urlEncode line="422" static="1"><f a="">
	<unknown/>
	<c path="String"/>
</f></_urlEncode>
		<_urlDecode line="423" static="1"><f a="">
	<unknown/>
	<c path="String"/>
</f></_urlDecode>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	'using StringTools' and then acts as an extension to the String class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Sys" params="" file="/opt/haxe/std/neko/_std/Sys.hx">
		<sleep public="1" set="method" line="74" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspend the current execution for the given time (in seconds).</haxe_doc>
		</sleep>
		<time public="1" set="method" line="124" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value (in seconds).</haxe_doc>
		</time>
		<_sleep line="148" static="1"><f a="">
	<x path="Float"/>
	<unknown/>
</f></_sleep>
		<sys_time line="155" static="1"><f a=""><x path="Float"/></f></sys_time>
		<haxe_doc>This class gives you access to many base functionalities of system platforms. Looks in [sys] sub packages for more system APIs.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<enum path="ValueType" params="" file="/opt/haxe/std/neko/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="Type" params="" file="/opt/haxe/std/neko/_std/Type.hx">
		<getClassName public="1" set="method" line="57" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="64" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="69" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="84" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createEmptyInstance public="1" params="T" set="method" line="111" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="117" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<getEnumConstructs public="1" set="method" line="168" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="173" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="awe.Archetype" params="" file="src/awe/Archetype.hx">
		<types><c path="Array"><x path="awe.ComponentType"/></c></types>
		<cid><x path="awe.util.BitSet"/></cid>
		<create public="1" set="method" line="43">
			<f a="engine">
				<c path="awe.Engine"/>
				<x path="awe.Entity"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Create a new `Entity` with the components given by this `Archetype`.
		@param engine The engine to create the entity in.
		@return The created entity.</haxe_doc>
		</create>
		<createSome public="1" set="method" line="59">
			<f a="engine:count">
				<c path="awe.Engine"/>
				<x path="Int"/>
				<x path="awe.util.Bag"><x path="awe.Entity"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</createSome>
		<new public="1" set="method" line="34">
			<f a="cid:types">
				<x path="awe.util.BitSet"/>
				<c path="Array"><x path="awe.ComponentType"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Archetype.
		@param cid The component ID.
		@param types The component types to construct and attach.</haxe_doc>
		</new>
		<haxe_doc>Blueprints for fast `Entity` construction.

	This can be constructed by using the `Archetype.build(_)` macro.
	Using this, you can build an archetype by calling it with the
	components you want the `Entity` to have.

	### Example
	```haxe
	Archetype.build(Position, Velocity);
	```</haxe_doc>
	</class>
	<typedef path="awe.MType" params="" file="src/awe/Component.hx" module="awe.Component"><e path="haxe.macro.Type"/></typedef>
	<class path="awe.Component" params="" file="src/awe/Component.hx" interface="1">
		<getType public="1" set="method">
			<f a=""><x path="awe.ComponentType"/></f>
			<haxe_doc>Retrieve the component type for this component. This can be used to
		determine how the component is stored. 
		@return The component type.</haxe_doc>
		</getType>
		<haxe_doc>Raw data to be attached to an `Entity`. Should contain absolutely no logic
	and should be serializable. This will be automatically pooled or packed.</haxe_doc>
		<meta>
			<m n=":autoBuild"><e>awe.Component.AutoComponent.from()</e></m>
			<m n=":keepSub"/>
		</meta>
	</class>
	<class path="awe.IComponentList" params="" file="src/awe/ComponentList.hx" module="awe.ComponentList" interface="1">
		<get_capacity public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_capacity>
		<capacity public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>How many components this list can hold without re-allocating.</haxe_doc>
		</capacity>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>How many components this list contains.</haxe_doc>
		</length>
		<get public="1" params="T" set="method">
			<f a="id">
				<x path="awe.Entity"/>
				<t path="Null"><c path="get.T"/></t>
			</f>
			<haxe_doc>Retrieve the component corresponding associated to the ID.
		@param id The `Entity` to retrieve the component for.
		@return The component.</haxe_doc>
		</get>
		<add public="1" params="T" set="method">
			<f a="id:value">
				<x path="awe.Entity"/>
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the component to this list with the given ID.
		@param id The `Entity` to add a component to.</haxe_doc>
		</add>
		<remove public="1" set="method">
			<f a="id">
				<x path="awe.Entity"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove the component corresponding to the ID given.
		@param id The `Entity` to remove from this list.</haxe_doc>
		</remove>
		<iterator public="1" set="method">
			<f a=""><c path="awe.ComponentListIterator"/></f>
			<haxe_doc>Iterate through the items in this list.
		@return The iterator for this list.</haxe_doc>
		</iterator>
		<serialize public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Serialize this list into a `String`.
		@return The serialized form of this list.</haxe_doc>
		</serialize>
		<unserialize public="1" set="method">
			<f a="value">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Unserialize the serialized value into this list.
		@param serial The serialized version of this list.</haxe_doc>
		</unserialize>
		<haxe_doc>Represents a list of components.</haxe_doc>
	</class>
	<class path="awe.ComponentList" params="" file="src/awe/ComponentList.hx">
		<implements path="awe.IComponentList"/>
		<genericUnserialize public="1" set="method" line="98" static="1"><f a="value">
	<c path="String"/>
	<c path="awe.IComponentList"/>
</f></genericUnserialize>
		<capacity public="1" get="accessor" set="null"><x path="Int"/></capacity>
		<length public="1" set="null"><x path="Int"/></length>
		<list><x path="haxe.ds.Vector"><c path="awe.Component"/></x></list>
		<get_capacity public="1" get="inline" set="null" line="61"><f a=""><x path="Int"/></f></get_capacity>
		<get public="1" params="T" get="inline" set="null" line="70">
			<f a="entity">
				<x path="awe.Entity"/>
				<t path="Null"><c path="get.T"/></t>
			</f>
			<meta><m n=":keep"/></meta>
		</get>
		<add public="1" params="T" set="method" line="73"><f a="entity:value">
	<x path="awe.Entity"/>
	<c path="add.T"/>
	<x path="Void"/>
</f></add>
		<remove public="1" get="inline" set="null" line="82"><f a="entity">
	<x path="awe.Entity"/>
	<x path="Void"/>
</f></remove>
		<iterator public="1" get="inline" set="null" line="85"><f a=""><c path="awe.ComponentListIterator"/></f></iterator>
		<serialize public="1" set="method" line="88"><f a=""><c path="String"/></f></serialize>
		<unserialize public="1" set="method" line="93"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></unserialize>
		<new public="1" set="method" line="64"><f a="?capacity">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="awe.ComponentListItem" params="" file="src/awe/ComponentList.hx" module="awe.ComponentList">
		<index public="1" set="null"><x path="awe.Entity"/></index>
		<component public="1" set="null"><c path="awe.Component"/></component>
		<new public="1" set="method" line="114"><f a="index:component">
	<x path="awe.Entity"/>
	<c path="awe.Component"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="awe.ComponentListIterator" params="" file="src/awe/ComponentList.hx" module="awe.ComponentList">
		<list><c path="awe.IComponentList"/></list>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="126"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="129"><f a=""><c path="awe.ComponentListItem"/></f></next>
		<new public="1" set="method" line="123"><f a="list">
	<c path="awe.IComponentList"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="awe.PackedComponentList" params="" file="src/awe/ComponentList.hx" module="awe.ComponentList">
		<implements path="awe.IComponentList"/>
		<capacity public="1" get="accessor" set="null"><x path="Int"/></capacity>
		<length public="1" set="null"><x path="Int"/></length>
		<buffer><t path="awe.PackedComponent"/></buffer>
		<bytes><c path="haxe.io.Bytes"/></bytes>
		<size><x path="Int"/></size>
		<get_capacity public="1" get="inline" set="null" line="143"><f a=""><x path="Int"/></f></get_capacity>
		<get public="1" params="T" get="inline" set="null" line="165">
			<f a="entity">
				<x path="awe.Entity"/>
				<t path="Null"><c path="get.T"/></t>
			</f>
			<meta><m n=":keep"/></meta>
		</get>
		<add public="1" params="T" set="method" line="170"><f a="entity:value">
	<x path="awe.Entity"/>
	<c path="add.T"/>
	<x path="Void"/>
</f></add>
		<remove public="1" get="inline" set="null" line="186"><f a="entity">
	<x path="awe.Entity"/>
	<x path="Void"/>
</f></remove>
		<serialize public="1" get="inline" set="null" line="189"><f a=""><c path="String"/></f></serialize>
		<unserialize public="1" set="method" line="192"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></unserialize>
		<iterator public="1" get="inline" set="null" line="197"><f a=""><c path="awe.ComponentListIterator"/></f></iterator>
		<new public="1" set="method" line="146"><f a="?capacity:size">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="awe.ComponentType" params="" file="src/awe/ComponentType.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>A Unique Identifier for a class implementing Component</haxe_doc>
		<impl><class path="awe._ComponentType.ComponentType_Impl_" params="" file="src/awe/ComponentType.hx" private="1" module="awe.ComponentType">
	<PACKED_FLAG public="1" get="inline" set="null" line="41" static="1"><x path="Int"/></PACKED_FLAG>
	<EMPTY_FLAG public="1" get="inline" set="null" line="42" static="1"><x path="Int"/></EMPTY_FLAG>
	<isEmpty public="1" get="inline" set="null" line="43" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</isEmpty>
	<isPacked public="1" get="inline" set="null" line="46" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</isPacked>
	<getPure public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="awe.ComponentType"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getPure>
	<eq get="inline" set="null" line="52" static="1">
		<f a="a:b">
			<x path="awe.ComponentType"/>
			<x path="awe.ComponentType"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A==B</e></m></meta>
	</eq>
	<neq get="inline" set="null" line="57" static="1">
		<f a="a:b">
			<x path="awe.ComponentType"/>
			<x path="awe.ComponentType"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A!=B</e></m></meta>
	</neq>
</class></impl>
	</abstract>
	<class path="awe._ComponentType.ComponentType_Impl_" params="" file="src/awe/ComponentType.hx" private="1" module="awe.ComponentType">
		<PACKED_FLAG public="1" get="inline" set="null" line="41" static="1"><x path="Int"/></PACKED_FLAG>
		<EMPTY_FLAG public="1" get="inline" set="null" line="42" static="1"><x path="Int"/></EMPTY_FLAG>
		<isEmpty public="1" get="inline" set="null" line="43" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</isEmpty>
		<isPacked public="1" get="inline" set="null" line="46" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</isPacked>
		<getPure public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="awe.ComponentType"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getPure>
		<eq get="inline" set="null" line="52" static="1">
			<f a="a:b">
				<x path="awe.ComponentType"/>
				<x path="awe.ComponentType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A==B</e></m></meta>
		</eq>
		<neq get="inline" set="null" line="57" static="1">
			<f a="a:b">
				<x path="awe.ComponentType"/>
				<x path="awe.ComponentType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A!=B</e></m></meta>
		</neq>
	</class>
	<class path="awe.Injector" params="" file="src/awe/Engine.hx" module="awe.Engine" interface="1">
		<injectInto public="1" set="method"><f a="v">
	<d/>
	<x path="Void"/>
</f></injectInto>
		<meta><m n=":extern"/></meta>
	</class>
	<class path="awe.Engine" params="" file="src/awe/Engine.hx">
		<components public="1" set="null">
			<x path="Map">
				<x path="awe.ComponentType"/>
				<c path="awe.IComponentList"/>
			</x>
			<haxe_doc>The component lists for each type of `Component`.</haxe_doc>
		</components>
		<systems public="1" set="null">
			<x path="awe.util.Bag"><c path="awe.System"/></x>
			<haxe_doc>The systems to run.</haxe_doc>
		</systems>
		<managers public="1" set="null">
			<x path="awe.util.Bag"><c path="awe.Manager"/></x>
			<haxe_doc>The managers.</haxe_doc>
		</managers>
		<entities public="1" set="null">
			<x path="awe.util.Bag"><x path="awe.Entity"/></x>
			<haxe_doc>The entities that the systems run on.</haxe_doc>
		</entities>
		<compositions public="1" set="null">
			<x path="Map">
				<x path="awe.Entity"/>
				<x path="awe.util.BitSet"/>
			</x>
			<haxe_doc>The composition of each entity.</haxe_doc>
		</compositions>
		<entityCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>How many entities have been created so far.</haxe_doc>
		</entityCount>
		<injector public="1" set="null">
			<c path="awe.Injector"/>
			<haxe_doc>This is used to inject the `IComponentList` into the `System`s.</haxe_doc>
		</injector>
		<update public="1" get="inline" set="null" line="116">
			<f a="delta">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Update all the `System`s contained in this.
		@param delta The change in time (in seconds).</haxe_doc>
		</update>
		<delayLoop public="1" set="method" line="126">
			<f a="interval">
				<x path="Float"/>
				<c path="awe.util.Timer"/>
			</f>
			<haxe_doc>Automatically run all the `System`s at a given interval.
		@param interval The interval to run the systems at (in seconds).
		@return The timer that has been created to run this.</haxe_doc>
		</delayLoop>
		<loop public="1" set="method" line="131"><f a=""><x path="Void"/></f></loop>
		<new public="1" set="method" line="50">
			<f a="components:systems:managers:injector">
				<x path="Map">
					<x path="awe.ComponentType"/>
					<c path="awe.IComponentList"/>
				</x>
				<x path="awe.util.Bag"><c path="awe.System"/></x>
				<x path="awe.util.Bag"><c path="awe.Manager"/></x>
				<c path="awe.Injector"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct a new engine.
		Note: `Engine.build` should be preferred.
		@param components The component lists for each type of `Component`.
		@param systems The systems to run.
		@param injector This is used to inject the `IComponentList` into the `System`s.</haxe_doc>
		</new>
		<haxe_doc>The central type of `Engine`.</haxe_doc>
	</class>
	<typedef path="awe.EngineSetup" params="" file="src/awe/Engine.hx" module="awe.Engine"><a>
	<systems>
		<t path="Null"><c path="Array"><c path="awe.System"/></c></t>
		<meta><m n=":optional"/></meta>
	</systems>
	<managers>
		<t path="Null"><c path="Array"><c path="awe.Manager"/></c></t>
		<meta><m n=":optional"/></meta>
	</managers>
	<expectedEntityCount>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</expectedEntityCount>
	<components>
		<t path="Null"><c path="Array"><x path="Class"><c path="awe.Component"/></x></c></t>
		<meta><m n=":optional"/></meta>
	</components>
</a></typedef>
	<abstract path="awe.Entity" params="" file="src/awe/Entity.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>Reperesents a single thing in a `World`.</haxe_doc>
		<impl><class path="awe._Entity.Entity_Impl_" params="" file="src/awe/Entity.hx" private="1" module="awe.Entity">
	<id public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The identifier of this entity.</haxe_doc>
	</id>
	<get_id get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_id>
	<getComposition public="1" get="inline" set="null" line="26" static="1">
		<f a="this:engine">
			<x path="Int"/>
			<c path="awe.Engine"/>
			<x path="awe.util.BitSet"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Finds the composition bits of this entity.
		@param engine The engine this `Entity` is contained in.
		@return The composition bits.</haxe_doc>
	</getComposition>
	<add public="1" params="T" set="method" line="47" static="1">
		<f a="engine:value">
			<c path="awe.Engine"/>
			<c path="add.T"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Add the component to the `Engine`, and attach it to this entity.
		@param engine The engine this entity is in.
		@param value The component to attach to this entity.</haxe_doc>
	</add>
	<get public="1" params="T" set="method" line="54" static="1">
		<f a="engine:kind">
			<c path="awe.Engine"/>
			<x path="Class"><c path="get.T"/></x>
			<t path="Null"><c path="get.T"/></t>
		</f>
		<haxe_doc>Retrieve the component attached to this entity from the `Engine`.
		@param engine The engine this entity is in.
		@param kind The component type to find.
		@return The component of the type given.</haxe_doc>
	</get>
	<toString public="1" get="inline" set="null" line="72" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the string representation of this data.</haxe_doc>
	</toString>
</class></impl>
	</abstract>
	<class path="awe._Entity.Entity_Impl_" params="" file="src/awe/Entity.hx" private="1" module="awe.Entity">
		<id public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The identifier of this entity.</haxe_doc>
		</id>
		<get_id get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_id>
		<getComposition public="1" get="inline" set="null" line="26" static="1">
			<f a="this:engine">
				<x path="Int"/>
				<c path="awe.Engine"/>
				<x path="awe.util.BitSet"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Finds the composition bits of this entity.
		@param engine The engine this `Entity` is contained in.
		@return The composition bits.</haxe_doc>
		</getComposition>
		<add public="1" params="T" set="method" line="47" static="1">
			<f a="engine:value">
				<c path="awe.Engine"/>
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the component to the `Engine`, and attach it to this entity.
		@param engine The engine this entity is in.
		@param value The component to attach to this entity.</haxe_doc>
		</add>
		<get public="1" params="T" set="method" line="54" static="1">
			<f a="engine:kind">
				<c path="awe.Engine"/>
				<x path="Class"><c path="get.T"/></x>
				<t path="Null"><c path="get.T"/></t>
			</f>
			<haxe_doc>Retrieve the component attached to this entity from the `Engine`.
		@param engine The engine this entity is in.
		@param kind The component type to find.
		@return The component of the type given.</haxe_doc>
		</get>
		<toString public="1" get="inline" set="null" line="72" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the string representation of this data.</haxe_doc>
		</toString>
	</class>
	<class path="awe.Filter" params="" file="src/awe/Filter.hx">
		<allSet set="null"><x path="awe.util.BitSet"/></allSet>
		<oneSet set="null"><x path="awe.util.BitSet"/></oneSet>
		<noneSet set="null"><x path="awe.util.BitSet"/></noneSet>
		<toString public="1" set="method" line="105">
			<f a=""><c path="String"/></f>
			<haxe_doc>Make a string representation of this filter.
		@return The string representation.</haxe_doc>
		</toString>
		<matches public="1" get="inline" set="null" line="112">
			<f a="components">
				<x path="awe.util.BitSet"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the `components` set fulfills this filter.
		@param components The `BitSet` of components to check against.
		@return If the `components` set fulfills this filter.</haxe_doc>
		</matches>
		<matching public="1" set="method" line="116"><f a="engine">
	<c path="awe.Engine"/>
	<c path="Array"><x path="awe.Entity"/></c>
</f></matching>
		<new public="1" set="method" line="49"><f a="allSet:oneSet:noneSet">
	<x path="awe.util.BitSet"/>
	<x path="awe.util.BitSet"/>
	<x path="awe.util.BitSet"/>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[A filter for matching entities' components against. This is used to check
	if a system is interested in processing an entity.

	This can be constructed by using the `Filter.build(_)` macro.
	Using this, you can build a filter from a binary operation representing
	the combination of types this will expect.

	### Binary Syntax

	#### All of...
	```haxe
	Filter.build(Position & Velocity);
	```
	#### One of...
	```haxe
	Filter.build(Position | Velocity);
	```
	#### None of...
	```haxe
	Filter.build(!Position);
	```

	### Alternate syntax
	```haxe
	Filter.build({
		all: [Position, Velocity, Gravity, Physical],
		none: Frozen
	})
	```]]></haxe_doc>
	</class>
	<class path="awe.Manager" params="" file="src/awe/Manager.hx">
		<engine public="1" set="null">
			<c path="awe.Engine"/>
			<haxe_doc>The engine that contains this manager.</haxe_doc>
		</engine>
		<initialize public="1" set="method" line="10">
			<f a="engine">
				<c path="awe.Engine"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Initializes this manager in the `Engine`.
		@param engine The `Engine` to initialize this in.</haxe_doc>
		</initialize>
		<added public="1" set="method" line="17">
			<f a="entity">
				<x path="awe.Entity"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when an entity is added to the engine.</haxe_doc>
		</added>
		<removed public="1" set="method" line="21">
			<f a="entity">
				<x path="awe.Entity"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when an entity is deleted from the engine.</haxe_doc>
		</removed>
	</class>
	<typedef path="awe.PackedComponent" params="" file="src/awe/PackedComponent.hx"><a>
	<__offset><x path="Int"/></__offset>
	<__bytes><c path="haxe.io.Bytes"/></__bytes>
</a></typedef>
	<class path="awe.System" params="" file="src/awe/System.hx">
		<engine public="1" set="null">
			<c path="awe.Engine"/>
			<haxe_doc>The engine that contains this system.</haxe_doc>
		</engine>
		<enabled public="1">
			<x path="Bool"/>
			<haxe_doc>If this system is enabled or not.</haxe_doc>
		</enabled>
		<shouldProcess public="1" set="method" line="20">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Check if this system should be processed.
		@return If this should be processed or not.</haxe_doc>
		</shouldProcess>
		<initialize public="1" set="method" line="27">
			<f a="engine">
				<c path="awe.Engine"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Initializes this system in the `Engine`.
		@param engine The `Engine` to initialize this in.</haxe_doc>
		</initialize>
		<update public="1" set="method" line="36">
			<f a="delta">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates this system.
		@param delta The change in time in seconds.</haxe_doc>
		</update>
		<new public="1" set="method" line="12">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Create a new, empty system.</haxe_doc>
		</new>
		<haxe_doc>A basic system.</haxe_doc>
	</class>
	<class path="awe.EntitySystem" params="" file="src/awe/System.hx" module="awe.System">
		<extends path="awe.System"/>
		<filter public="1" set="null">
			<c path="awe.Filter"/>
			<haxe_doc>The filter to check an entity against before adding to this system.</haxe_doc>
		</filter>
		<matchers public="1" set="null">
			<x path="awe.util.Bag"><x path="awe.Entity"/></x>
			<haxe_doc>The entities that match the `filter`.</haxe_doc>
		</matchers>
		<updateMatchers public="1" set="method" line="49"><f a=""><x path="Void"/></f></updateMatchers>
		<updateEntity public="1" set="method" line="55"><f a="delta:entity">
	<x path="Float"/>
	<x path="awe.Entity"/>
	<x path="Void"/>
</f></updateEntity>
		<update public="1" set="method" line="56" override="1"><f a="delta">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="44"><f a="filter">
	<c path="awe.Filter"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="awe.managers.GroupManager" params="" file="src/awe/managers/GroupManager.hx">
		<extends path="awe.Manager"/>
		<groups><x path="Map">
	<c path="String"/>
	<x path="awe.util.Bag"><x path="awe.Entity"/></x>
</x></groups>
		<add public="1" set="method" line="21">
			<f a="entity:group">
				<x path="awe.Entity"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the group of the entity.
		@param entity The entity whose group is being set.
		@param group The group to set the entity to.</haxe_doc>
		</add>
		<getEntities public="1" get="inline" set="null" line="31">
			<f a="group">
				<c path="String"/>
				<x path="awe.util.Bag"><x path="awe.Entity"/></x>
			</f>
			<haxe_doc>Get the entities contained in a given group.
		@param group The group to check.
		@return The entities.</haxe_doc>
		</getEntities>
		<getGroups public="1" set="method" line="39">
			<f a="entity">
				<x path="awe.Entity"/>
				<x path="awe.util.Bag"><c path="String"/></x>
			</f>
			<haxe_doc>Get all groups the entity belongs to..
		@param entity The entity to get the groups of.
		@return The groups it belongs to.</haxe_doc>
		</getGroups>
		<isInGroup public="1" get="inline" set="null" line="53">
			<f a="entity:group">
				<x path="awe.Entity"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check if the entity is in the group.
		@param entity The entity to check.
		@param group The group to check the ntity is contained in.
		@return If the entity is in the group.</haxe_doc>
		</isInGroup>
		<remove public="1" get="inline" set="null" line="61">
			<f a="entity:group">
				<x path="awe.Entity"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove the entity from the specified group.
		@param entity The entity to remove from the group.
		@param group The group to remove the entity from.</haxe_doc>
		</remove>
		<removeGroup public="1" get="inline" set="null" line="68">
			<f a="group">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Completely remove the group.
		@param group The group to remove.</haxe_doc>
		</removeGroup>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Handles entity grouping.</haxe_doc>
	</class>
	<abstract path="awe.util.Bag" params="T" file="src/awe/util/Bag.hx">
		<from>
			<icast field="fromVector"><x path="haxe.ds.Vector"><c path="fromVector.T"/></x></icast>
			<icast field="fromArray"><c path="Array"><c path="fromArray.T"/></c></icast>
		</from>
		<this><c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c></this>
		<to><icast field="toArray"><c path="Array"><c path="awe.util.Bag.T"/></c></icast></to>
		<haxe_doc>A fast collection type similar to `Array` in usage but does not preserve order
	of its entities. It is faster to add to than an `Array` because it is actually
	represented internally as a `haxe.ds.Vector` with automatic resizing.</haxe_doc>
		<impl><class path="awe.util._Bag.Bag_Impl_" params="" file="src/awe/util/Bag.hx" private="1" module="awe.util.Bag">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>How many items are contained in this bag.</haxe_doc>
	</length>
	<capacity public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>How many items can be stored in this bag without re-allocating.</haxe_doc>
	</capacity>
	<_new public="1" get="inline" set="null" line="20" static="1">
		<f a="?capacity">
			<x path="Int"/>
			<x path="awe.util.Bag"><c path="awe.util.Bag.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Construct a new Bag with the capacity given or 16.
		@param capacity How many items can be stored in this bag without re-allocating.</haxe_doc>
	</_new>
	<get_capacity get="inline" set="null" line="23" static="1">
		<f a="this">
			<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_capacity>
	<get_length get="inline" set="null" line="31" static="1">
		<f a="this">
			<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<clear public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Clear this of items.</haxe_doc>
	</clear>
	<contains public="1" get="inline" set="null" line="48" static="1">
		<f a="this:value">
			<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
			<c path="awe.util.Bag.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Check if this bag contains the value given.
		@param value The value to check is contained.
		@return If this value is contained in this bag.</haxe_doc>
	</contains>
	<add public="1" get="inline" set="null" line="55" static="1">
		<f a="this:item">
			<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
			<c path="awe.util.Bag.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Add the item to this bag.
		@param item The item to add.</haxe_doc>
	</add>
	<ensureCapacity public="1" get="inline" set="null" line="62" static="1">
		<f a="this:capacity">
			<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Ensure that this bag can store up to `capacity` without re-allocating.
		@param capacity The capacity to make sure is allocated.</haxe_doc>
	</ensureCapacity>
	<get public="1" get="inline" set="null" line="66" static="1">
		<f a="this:index">
			<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
			<x path="Int"/>
			<t path="Null"><c path="awe.util.Bag.T"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Retrieve the `index`th item from this bag.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="70" static="1">
		<f a="this:index:value">
			<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
			<x path="Int"/>
			<c path="awe.util.Bag.T"/>
			<c path="awe.util.Bag.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Set the `index`th item in this bag to `value`.</haxe_doc>
	</set>
	<iterator public="1" get="inline" set="null" line="77" static="1">
		<f a="this">
			<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
			<c path="awe.util.BagIterator"><c path="awe.util.Bag.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Iterate through this bag's contents.
		@return The iterator.</haxe_doc>
	</iterator>
	<remove public="1" get="inline" set="null" line="85" static="1">
		<f a="this:item">
			<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
			<c path="awe.util.Bag.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Remove `item` from this bag.
		@param item The item to try to remove.
		@return If the item could be found and removed.</haxe_doc>
	</remove>
	<removeLast public="1" get="inline" set="null" line="92" static="1">
		<f a="this">
			<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
			<t path="Null"><c path="awe.util.Bag.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Remove the last item from this bag.
		@return The ex-last item.</haxe_doc>
	</removeLast>
	<blit public="1" get="inline" set="null" line="103" static="1">
		<f a="this:srcPos:dest:destPos:len">
			<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
			<x path="Int"/>
			<x path="awe.util.Bag"><c path="awe.util.Bag.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Copy the elements from `srcPos` terminating at `srcPos + len` to `dest` at the offset `destPos`</haxe_doc>
	</blit>
	<fromVector public="1" params="T" get="inline" set="null" line="112" static="1">
		<f a="vector">
			<x path="haxe.ds.Vector"><c path="fromVector.T"/></x>
			<x path="awe.util.Bag"><unknown/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</fromVector>
	<fromArray public="1" params="T" set="method" line="125" static="1">
		<f a="array">
			<c path="Array"><c path="fromArray.T"/></c>
			<x path="awe.util.Bag"><unknown/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromArray>
	<toArray public="1" get="inline" set="null" line="136" static="1">
		<f a="this">
			<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
			<c path="Array"><c path="awe.util.Bag.T"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="awe.util._Bag.Bag_Impl_" params="" file="src/awe/util/Bag.hx" private="1" module="awe.util.Bag">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>How many items are contained in this bag.</haxe_doc>
		</length>
		<capacity public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>How many items can be stored in this bag without re-allocating.</haxe_doc>
		</capacity>
		<_new public="1" get="inline" set="null" line="20" static="1">
			<f a="?capacity">
				<x path="Int"/>
				<x path="awe.util.Bag"><c path="awe.util.Bag.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Construct a new Bag with the capacity given or 16.
		@param capacity How many items can be stored in this bag without re-allocating.</haxe_doc>
		</_new>
		<get_capacity get="inline" set="null" line="23" static="1">
			<f a="this">
				<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_capacity>
		<get_length get="inline" set="null" line="31" static="1">
			<f a="this">
				<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<clear public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Clear this of items.</haxe_doc>
		</clear>
		<contains public="1" get="inline" set="null" line="48" static="1">
			<f a="this:value">
				<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
				<c path="awe.util.Bag.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Check if this bag contains the value given.
		@param value The value to check is contained.
		@return If this value is contained in this bag.</haxe_doc>
		</contains>
		<add public="1" get="inline" set="null" line="55" static="1">
			<f a="this:item">
				<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
				<c path="awe.util.Bag.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Add the item to this bag.
		@param item The item to add.</haxe_doc>
		</add>
		<ensureCapacity public="1" get="inline" set="null" line="62" static="1">
			<f a="this:capacity">
				<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Ensure that this bag can store up to `capacity` without re-allocating.
		@param capacity The capacity to make sure is allocated.</haxe_doc>
		</ensureCapacity>
		<get public="1" get="inline" set="null" line="66" static="1">
			<f a="this:index">
				<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
				<x path="Int"/>
				<t path="Null"><c path="awe.util.Bag.T"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Retrieve the `index`th item from this bag.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="70" static="1">
			<f a="this:index:value">
				<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
				<x path="Int"/>
				<c path="awe.util.Bag.T"/>
				<c path="awe.util.Bag.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Set the `index`th item in this bag to `value`.</haxe_doc>
		</set>
		<iterator public="1" get="inline" set="null" line="77" static="1">
			<f a="this">
				<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
				<c path="awe.util.BagIterator"><c path="awe.util.Bag.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Iterate through this bag's contents.
		@return The iterator.</haxe_doc>
		</iterator>
		<remove public="1" get="inline" set="null" line="85" static="1">
			<f a="this:item">
				<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
				<c path="awe.util.Bag.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Remove `item` from this bag.
		@param item The item to try to remove.
		@return If the item could be found and removed.</haxe_doc>
		</remove>
		<removeLast public="1" get="inline" set="null" line="92" static="1">
			<f a="this">
				<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
				<t path="Null"><c path="awe.util.Bag.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Remove the last item from this bag.
		@return The ex-last item.</haxe_doc>
		</removeLast>
		<blit public="1" get="inline" set="null" line="103" static="1">
			<f a="this:srcPos:dest:destPos:len">
				<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
				<x path="Int"/>
				<x path="awe.util.Bag"><c path="awe.util.Bag.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Copy the elements from `srcPos` terminating at `srcPos + len` to `dest` at the offset `destPos`</haxe_doc>
		</blit>
		<fromVector public="1" params="T" get="inline" set="null" line="112" static="1">
			<f a="vector">
				<x path="haxe.ds.Vector"><c path="fromVector.T"/></x>
				<x path="awe.util.Bag"><unknown/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</fromVector>
		<fromArray public="1" params="T" set="method" line="125" static="1">
			<f a="array">
				<c path="Array"><c path="fromArray.T"/></c>
				<x path="awe.util.Bag"><unknown/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromArray>
		<toArray public="1" get="inline" set="null" line="136" static="1">
			<f a="this">
				<c path="awe.util.BagData"><c path="awe.util.Bag.T"/></c>
				<c path="Array"><c path="awe.util.Bag.T"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="awe.util.BagData" params="T" file="src/awe/util/Bag.hx" module="awe.util.Bag">
		<data public="1" set="null"><x path="haxe.ds.Vector"><c path="awe.util.BagData.T"/></x></data>
		<length public="1" set="null"><x path="Int"/></length>
		<ensureCapacity public="1" set="method" line="156"><f a="capacity">
	<x path="Int"/>
	<x path="Void"/>
</f></ensureCapacity>
		<clear public="1" set="method" line="163"><f a=""><x path="Void"/></f></clear>
		<add public="1" get="inline" set="null" line="169"><f a="item">
	<c path="awe.util.BagData.T"/>
	<x path="Void"/>
</f></add>
		<set public="1" get="inline" set="null" line="174"><f a="index:item">
	<x path="Int"/>
	<c path="awe.util.BagData.T"/>
	<c path="awe.util.BagData.T"/>
</f></set>
		<get public="1" get="inline" set="null" line="180"><f a="index">
	<x path="Int"/>
	<c path="awe.util.BagData.T"/>
</f></get>
		<removeLast public="1" set="method" line="183"><f a=""><t path="Null"><c path="awe.util.BagData.T"/></t></f></removeLast>
		<contains public="1" set="method" line="193"><f a="value">
	<c path="awe.util.BagData.T"/>
	<x path="Bool"/>
</f></contains>
		<remove public="1" set="method" line="200"><f a="value">
	<c path="awe.util.BagData.T"/>
	<x path="Bool"/>
</f></remove>
		<toString public="1" set="method" line="208"><f a=""><c path="String"/></f></toString>
		<blit public="1" get="inline" set="null" line="218"><f a="srcPos:dest:destPos:len">
	<x path="Int"/>
	<c path="awe.util.BagData"><c path="awe.util.BagData.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<iterator public="1" get="inline" set="null" line="221"><f a=""><c path="awe.util.BagIterator"><c path="awe.util.BagData.T"/></c></f></iterator>
		<new public="1" set="method" line="152"><f a="capacity">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":generic"/>
		</meta>
	</class>
	<class path="awe.util.BagIterator" params="T" file="src/awe/util/Bag.hx" module="awe.util.Bag">
		<bag><c path="awe.util.BagData"><c path="awe.util.BagIterator.T"/></c></bag>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="233"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="236"><f a=""><c path="awe.util.BagIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="228"><f a="bag">
	<c path="awe.util.BagData"><c path="awe.util.BagIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":generic"/>
		</meta>
	</class>
	<typedef path="awe.util.BitSetData" params="" file="src/awe/util/BitSet.hx" module="awe.util.BitSet"><x path="awe.util.Bag"><x path="Int"/></x></typedef>
	<abstract path="awe.util.BitSet" params="" file="src/awe/util/BitSet.hx">
		<from><icast field="fromArray"><c path="Array"><x path="Int"/></c></icast></from>
		<this><t path="awe.util.BitSetData"/></this>
		<to>
			<icast field="toBag"><x path="awe.util.Bag"><x path="Int"/></x></icast>
			<icast field="toBytes"><c path="haxe.io.Bytes"/></icast>
		</to>
		<haxe_doc>Compactly stores bits.</haxe_doc>
		<impl><class path="awe.util._BitSet.BitSet_Impl_" params="" file="src/awe/util/BitSet.hx" private="1" module="awe.util.BitSet">
	<capacity public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>How many bits this can hold</haxe_doc>
	</capacity>
	<wordIndex get="inline" set="null" line="21" static="1"><f a="bitIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></wordIndex>
	<_new public="1" get="inline" set="null" line="28" static="1">
		<f a="?value">
			<x path="Int"/>
			<x path="awe.util.BitSet"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Create a new BitSet with the given value for its first word.
		@param value The value to use for the first word.</haxe_doc>
	</_new>
	<toBag public="1" get="inline" set="null" line="43" static="1">
		<f a="this">
			<t path="awe.util.BitSetData"/>
			<x path="awe.util.Bag"><x path="Int"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc>Convert this to a Bag of Ints.
		@return The converted value.</haxe_doc>
	</toBag>
	<resize set="method" line="47" static="1">
		<f a="this:capacity">
			<t path="awe.util.BitSetData"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</resize>
	<get_capacity get="inline" set="null" line="52" static="1">
		<f a="this">
			<t path="awe.util.BitSetData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_capacity>
	<flip public="1" get="inline" set="null" line="62" static="1">
		<f a="this:index">
			<t path="awe.util.BitSetData"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Flip the bit at `index` to its compliment.
		@param index The bit index to flip.</haxe_doc>
	</flip>
	<flipRange public="1" get="inline" set="null" line="74" static="1">
		<f a="this:from:to">
			<t path="awe.util.BitSetData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Flip all the bits between `from` and `to` to their compliment.
		@param from The initial bit index.
		@param to The terminal bit index.</haxe_doc>
	</flipRange>
	<set public="1" get="inline" set="null" line="89" static="1">
		<f a="this:index:value">
			<t path="awe.util.BitSetData"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Set the bit at `index` to `value`.
		@param index The bit index to set.
		@param value The new value of the bit.
		@return The new value of the bit.</haxe_doc>
	</set>
	<setBit public="1" get="inline" set="null" line="101" static="1">
		<f a="this:index">
			<t path="awe.util.BitSetData"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Set the bit at `index` to true.
		@param index The bit index to set.</haxe_doc>
	</setBit>
	<setRange public="1" get="inline" set="null" line="117" static="1">
		<f a="this:from:to">
			<t path="awe.util.BitSetData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Set all the bits `from` and `to`.
		@param from The initial bit index.
		@param to The terminal bit index.</haxe_doc>
	</setRange>
	<clearBit public="1" get="inline" set="null" line="129" static="1">
		<f a="this:index">
			<t path="awe.util.BitSetData"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Set the bit at `index` to `false`.
		@param index The bit index to clear.</haxe_doc>
	</clearBit>
	<clearRange public="1" get="inline" set="null" line="141" static="1">
		<f a="this:from:to">
			<t path="awe.util.BitSetData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Set all the bits `from` and `to` to `false`.
		@param from The initial bit index.
		@param to The terminal bit index.</haxe_doc>
	</clearRange>
	<isEmpty public="1" get="inline" set="null" line="153" static="1">
		<f a="this">
			<t path="awe.util.BitSetData"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Check if this `BitSet` contains no true bits.
		@return If it is empty or not.</haxe_doc>
	</isEmpty>
	<clear public="1" get="inline" set="null" line="163" static="1">
		<f a="this">
			<t path="awe.util.BitSetData"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Completely clear this of any bits.</haxe_doc>
	</clear>
	<contains public="1" set="method" line="175" static="1">
		<f a="this:set">
			<t path="awe.util.BitSetData"/>
			<x path="awe.util.BitSet"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Check if this contains `set`.
		@param set The set to check is contained inside this one.
		@return If it is contained in this or not.</haxe_doc>
	</contains>
	<intersects public="1" set="method" line="198" static="1">
		<f a="this:set">
			<t path="awe.util.BitSetData"/>
			<x path="awe.util.BitSet"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Check if this intersects with `set`.
		@param set The set to check has at least one bit in common with this one.
		@return If it intersects this or not.</haxe_doc>
	</intersects>
	<and public="1" set="method" line="215" static="1">
		<f a="this:set">
			<t path="awe.util.BitSetData"/>
			<x path="awe.util.BitSet"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e><![CDATA[A&=B]]></e></m>
		</meta>
		<haxe_doc>Perform a bitwise AND on this and `set`.
		@param set The set to run AND on.</haxe_doc>
	</and>
	<or public="1" set="method" line="231" static="1">
		<f a="this:set">
			<t path="awe.util.BitSetData"/>
			<x path="awe.util.BitSet"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A|=B</e></m>
		</meta>
		<haxe_doc>Perform a bitwise OR on this and `set`.
		@param set The set to run OR on.</haxe_doc>
	</or>
	<get public="1" get="inline" set="null" line="248" static="1">
		<f a="this:index">
			<t path="awe.util.BitSetData"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Get the bit at `index`.
		@param index The index to get the bit of.
		@return The bit at `index`.</haxe_doc>
	</get>
	<toBytes public="1" get="inline" set="null" line="259" static="1">
		<f a="this">
			<t path="awe.util.BitSetData"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc>Convert this to `Bytes`.
		@return The converted value.</haxe_doc>
	</toBytes>
	<fromArray public="1" get="inline" set="null" line="268" static="1">
		<f a="array">
			<c path="Array"><x path="Int"/></c>
			<x path="awe.util.BitSet"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArray>
	<toString public="1" set="method" line="275" static="1">
		<f a="this">
			<t path="awe.util.BitSetData"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Create a string representation of this set and return it.
		@return The string representation of this set.</haxe_doc>
	</toString>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="awe.util._BitSet.BitSet_Impl_" params="" file="src/awe/util/BitSet.hx" private="1" module="awe.util.BitSet">
		<capacity public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>How many bits this can hold</haxe_doc>
		</capacity>
		<wordIndex get="inline" set="null" line="21" static="1"><f a="bitIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></wordIndex>
		<_new public="1" get="inline" set="null" line="28" static="1">
			<f a="?value">
				<x path="Int"/>
				<x path="awe.util.BitSet"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Create a new BitSet with the given value for its first word.
		@param value The value to use for the first word.</haxe_doc>
		</_new>
		<toBag public="1" get="inline" set="null" line="43" static="1">
			<f a="this">
				<t path="awe.util.BitSetData"/>
				<x path="awe.util.Bag"><x path="Int"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc>Convert this to a Bag of Ints.
		@return The converted value.</haxe_doc>
		</toBag>
		<resize set="method" line="47" static="1">
			<f a="this:capacity">
				<t path="awe.util.BitSetData"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</resize>
		<get_capacity get="inline" set="null" line="52" static="1">
			<f a="this">
				<t path="awe.util.BitSetData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_capacity>
		<flip public="1" get="inline" set="null" line="62" static="1">
			<f a="this:index">
				<t path="awe.util.BitSetData"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Flip the bit at `index` to its compliment.
		@param index The bit index to flip.</haxe_doc>
		</flip>
		<flipRange public="1" get="inline" set="null" line="74" static="1">
			<f a="this:from:to">
				<t path="awe.util.BitSetData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Flip all the bits between `from` and `to` to their compliment.
		@param from The initial bit index.
		@param to The terminal bit index.</haxe_doc>
		</flipRange>
		<set public="1" get="inline" set="null" line="89" static="1">
			<f a="this:index:value">
				<t path="awe.util.BitSetData"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Set the bit at `index` to `value`.
		@param index The bit index to set.
		@param value The new value of the bit.
		@return The new value of the bit.</haxe_doc>
		</set>
		<setBit public="1" get="inline" set="null" line="101" static="1">
			<f a="this:index">
				<t path="awe.util.BitSetData"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Set the bit at `index` to true.
		@param index The bit index to set.</haxe_doc>
		</setBit>
		<setRange public="1" get="inline" set="null" line="117" static="1">
			<f a="this:from:to">
				<t path="awe.util.BitSetData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Set all the bits `from` and `to`.
		@param from The initial bit index.
		@param to The terminal bit index.</haxe_doc>
		</setRange>
		<clearBit public="1" get="inline" set="null" line="129" static="1">
			<f a="this:index">
				<t path="awe.util.BitSetData"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Set the bit at `index` to `false`.
		@param index The bit index to clear.</haxe_doc>
		</clearBit>
		<clearRange public="1" get="inline" set="null" line="141" static="1">
			<f a="this:from:to">
				<t path="awe.util.BitSetData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Set all the bits `from` and `to` to `false`.
		@param from The initial bit index.
		@param to The terminal bit index.</haxe_doc>
		</clearRange>
		<isEmpty public="1" get="inline" set="null" line="153" static="1">
			<f a="this">
				<t path="awe.util.BitSetData"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Check if this `BitSet` contains no true bits.
		@return If it is empty or not.</haxe_doc>
		</isEmpty>
		<clear public="1" get="inline" set="null" line="163" static="1">
			<f a="this">
				<t path="awe.util.BitSetData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Completely clear this of any bits.</haxe_doc>
		</clear>
		<contains public="1" set="method" line="175" static="1">
			<f a="this:set">
				<t path="awe.util.BitSetData"/>
				<x path="awe.util.BitSet"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Check if this contains `set`.
		@param set The set to check is contained inside this one.
		@return If it is contained in this or not.</haxe_doc>
		</contains>
		<intersects public="1" set="method" line="198" static="1">
			<f a="this:set">
				<t path="awe.util.BitSetData"/>
				<x path="awe.util.BitSet"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Check if this intersects with `set`.
		@param set The set to check has at least one bit in common with this one.
		@return If it intersects this or not.</haxe_doc>
		</intersects>
		<and public="1" set="method" line="215" static="1">
			<f a="this:set">
				<t path="awe.util.BitSetData"/>
				<x path="awe.util.BitSet"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e><![CDATA[A&=B]]></e></m>
			</meta>
			<haxe_doc>Perform a bitwise AND on this and `set`.
		@param set The set to run AND on.</haxe_doc>
		</and>
		<or public="1" set="method" line="231" static="1">
			<f a="this:set">
				<t path="awe.util.BitSetData"/>
				<x path="awe.util.BitSet"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A|=B</e></m>
			</meta>
			<haxe_doc>Perform a bitwise OR on this and `set`.
		@param set The set to run OR on.</haxe_doc>
		</or>
		<get public="1" get="inline" set="null" line="248" static="1">
			<f a="this:index">
				<t path="awe.util.BitSetData"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Get the bit at `index`.
		@param index The index to get the bit of.
		@return The bit at `index`.</haxe_doc>
		</get>
		<toBytes public="1" get="inline" set="null" line="259" static="1">
			<f a="this">
				<t path="awe.util.BitSetData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc>Convert this to `Bytes`.
		@return The converted value.</haxe_doc>
		</toBytes>
		<fromArray public="1" get="inline" set="null" line="268" static="1">
			<f a="array">
				<c path="Array"><x path="Int"/></c>
				<x path="awe.util.BitSet"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArray>
		<toString public="1" set="method" line="275" static="1">
			<f a="this">
				<t path="awe.util.BitSetData"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Create a string representation of this set and return it.
		@return The string representation of this set.</haxe_doc>
		</toString>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="awe.util.ClassMap" params="V" file="src/awe/util/ClassMap.hx">
		<_keys><c path="Array"><x path="Class"><d/></x></c></_keys>
		<_map><c path="haxe.ds.StringMap"><c path="awe.util.ClassMap.V"/></c></_map>
		<set public="1" get="inline" set="null" line="22">
			<f a="key:value">
				<x path="Class"><d/></x>
				<c path="awe.util.ClassMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="28">
			<f a="key">
				<x path="Class"><d/></x>
				<t path="Null"><c path="awe.util.ClassMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="34">
			<f a="key">
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="40">
			<f a="key">
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="46">
			<f a=""><t path="Iterator"><x path="Class"><d/></x></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="52">
			<f a=""><t path="Iterator"><c path="awe.util.ClassMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" get="inline" set="null" line="57">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="14">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new `ClassMap`.</haxe_doc>
		</new>
		<haxe_doc>Allows mapping of classes to abritary values.</haxe_doc>
	</class>
	<class path="awe.util.MacroTools" params="" file="src/awe/util/MacroTools.hx"><haxe_doc>Some handy macro tools.</haxe_doc></class>
	<class path="awe.util.MoreStringTools" params="" file="src/awe/util/MoreStringTools.hx">
		<isVowel public="1" set="method" line="7" static="1">
			<f a="char">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if this char a vowel.</haxe_doc>
		</isVowel>
		<pluralize public="1" set="method" line="14" static="1">
			<f a="word">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Transform `word` into a plural.</haxe_doc>
		</pluralize>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="awe.util.Signal" params="T" file="src/awe/util/Signal.hx">
		<this><x path="awe.util.Bag"><c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c></x></this>
		<to><icast field="getListeners"><x path="awe.util.Bag"><c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c></x></icast></to>
		<haxe_doc>Dispatches events to listeners.</haxe_doc>
		<impl><class path="awe.util._Signal.Signal_Impl_" params="" file="src/awe/util/Signal.hx" private="1" module="awe.util.Signal">
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a=""><x path="awe.util.Signal"><c path="awe.util.Signal.T"/></x></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Create a new signal.</haxe_doc>
	</_new>
	<dispatch public="1" get="inline" set="null" line="15" static="1">
		<f a="this:event">
			<x path="awe.util.Bag"><c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c></x>
			<c path="awe.util.Signal.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Dispatch `event`, notifying all listeners of the event.
		@param event The event to dispatch to all listeners.</haxe_doc>
	</dispatch>
	<add public="1" get="inline" set="null" line="23" static="1">
		<f a="this:dispatch">
			<x path="awe.util.Bag"><c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c></x>
			<c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Add a new dispatcher.
		@param dispatch The dispatcher to add.</haxe_doc>
	</add>
	<remove public="1" get="inline" set="null" line="30" static="1">
		<f a="this:dispatch">
			<x path="awe.util.Bag"><c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c></x>
			<c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Add a new dispatcher.
		@param dispatch The dispatcher to remove.</haxe_doc>
	</remove>
	<clear public="1" get="inline" set="null" line="34" static="1">
		<f a="this">
			<x path="awe.util.Bag"><c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c></x>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Remove all the listeners.</haxe_doc>
	</clear>
	<getListeners public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<x path="awe.util.Bag"><c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c></x>
			<x path="awe.util.Bag"><c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc>Get all the listeners binded to this.
		@return The listeners.</haxe_doc>
	</getListeners>
</class></impl>
	</abstract>
	<class path="awe.util._Signal.Signal_Impl_" params="" file="src/awe/util/Signal.hx" private="1" module="awe.util.Signal">
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a=""><x path="awe.util.Signal"><c path="awe.util.Signal.T"/></x></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Create a new signal.</haxe_doc>
		</_new>
		<dispatch public="1" get="inline" set="null" line="15" static="1">
			<f a="this:event">
				<x path="awe.util.Bag"><c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c></x>
				<c path="awe.util.Signal.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Dispatch `event`, notifying all listeners of the event.
		@param event The event to dispatch to all listeners.</haxe_doc>
		</dispatch>
		<add public="1" get="inline" set="null" line="23" static="1">
			<f a="this:dispatch">
				<x path="awe.util.Bag"><c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c></x>
				<c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Add a new dispatcher.
		@param dispatch The dispatcher to add.</haxe_doc>
		</add>
		<remove public="1" get="inline" set="null" line="30" static="1">
			<f a="this:dispatch">
				<x path="awe.util.Bag"><c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c></x>
				<c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Add a new dispatcher.
		@param dispatch The dispatcher to remove.</haxe_doc>
		</remove>
		<clear public="1" get="inline" set="null" line="34" static="1">
			<f a="this">
				<x path="awe.util.Bag"><c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c></x>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Remove all the listeners.</haxe_doc>
		</clear>
		<getListeners public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<x path="awe.util.Bag"><c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c></x>
				<x path="awe.util.Bag"><c path="awe.util.SignalListener"><c path="awe.util.Signal.T"/></c></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc>Get all the listeners binded to this.
		@return The listeners.</haxe_doc>
		</getListeners>
	</class>
	<class path="awe.util.SignalListener" params="T" file="src/awe/util/SignalListener.hx" interface="1">
		<on public="1" set="method">
			<f a="event">
				<c path="awe.util.SignalListener.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Process the signal listener with `event`.
		@param event The event to process.</haxe_doc>
		</on>
		<haxe_doc>Capable of listening to a signal of type T.</haxe_doc>
	</class>
	<typedef path="awe.util.Thread" params="" file="src/awe/util/Thread.hx"><c path="neko.vm.Thread"/></typedef>
	<class path="awe.util.Timer" params="" file="src/awe/util/Timer.hx">
		<stamp public="1" get="inline" set="null" line="22" static="1"><f a=""><x path="Float"/></f></stamp>
		<me><c path="neko.vm.Thread"/></me>
		<run public="1" set="dynamic" line="19"><f a=""><x path="Void"/></f></run>
		<new public="1" set="method" line="10"><f a="time_ms">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="haxe.Function" params="" file="/opt/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/opt/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/opt/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/opt/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="/opt/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1"><meta><m n=":keep"/></meta></class>
	<class path="haxe.EnumTools" params="" file="/opt/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is null, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/opt/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getIndex>
		<match public="1" set="method" static="1">
			<f a="e:pattern">
				<x path="EnumValue"/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning true if
		matching succeeded and false otherwise.

		Example usage:

		```
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
		</match>
	</class>
	<abstract path="haxe.Int32" params="" file="/opt/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
 	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/opt/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Int64" params="" file="/opt/haxe/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/opt/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
	<high public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</high>
	<low public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</low>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<typedef path="haxe._Int64.__Int64" params="" file="/opt/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>* This typedef will fool @:coreApi into thinking that we are using
  * the same underlying type, even though it might be different on
  * specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe.Serializer" params="" file="/opt/haxe/std/haxe/Serializer.hx">
		<USE_CACHE public="1" line="55" static="1">
			<x path="Bool"/>
			<haxe_doc>If the values you are serializing can contain circular references or
		objects repetitions, you should set USE_CACHE to true to prevent
		infinite loops.

		This may also reduce the size of serialization Strings at the expense of
		performance.

		This value can be changed for individual instances of Serializer by
		setting their useCache field.</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" line="67" static="1">
			<x path="Bool"/>
			<haxe_doc>Use constructor indexes for enums instead of names.

		This may reduce the size of serialization Strings, but makes them less
		suited for long-term storage: If constructors are removed or added from
		the enum, the indices may no longer match.

		This value can be changed for individual instances of Serializer by
		setting their useEnumIndex field.</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 line="69" static="1"><c path="String"/></BASE64>
		<run public="1" set="method" line="544" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Serializes `v` and returns the String representation.

		This is a convenience function for creating a new instance of
		Serializer, serialize `v` into it and obtain the result through a call
		to toString().</haxe_doc>
		</run>
		<base_encode line="551" static="1"><f a=":">
	<t path="haxe.io.BytesData"/>
	<unknown/>
	<c path="String"/>
</f></base_encode>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="haxe.ds.StringMap"><x path="Int"/></c></shash>
		<scount><x path="Int"/></scount>
		<useCache public="1">
			<x path="Bool"/>
			<haxe_doc>The individual cache setting for `this` Serializer instance.

		See USE_CACHE for a complete description.</haxe_doc>
		</useCache>
		<useEnumIndex public="1">
			<x path="Bool"/>
			<haxe_doc>The individual enum index setting for `this` Serializer instance.

		See USE_ENUM_INDEX for a complete description.</haxe_doc>
		</useEnumIndex>
		<toString public="1" set="method" line="115">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the String representation of `this` Serializer.

		The exact format specification can be found here:
		http://haxe.org/manual/serialization/format</haxe_doc>
		</toString>
		<serializeString set="method" line="152"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="171"><f a="v">
	<unknown/>
	<x path="Bool"/>
</f></serializeRef>
		<serializeFields set="method" line="208"><f a="v">
	<unknown/>
	<x path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="226">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Serializes `v`.

		All haxe-defined values and objects with the exception of functions can
		be serialized. Serialization of external/native objects is not
		guaranteed to work.

		The values of `this.useCache` and `this.useEnumIndex` may affect
		serialization output.</haxe_doc>
		</serialize>
		<new public="1" set="method" line="100">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Serializer instance.

		Subsequent calls to `this.serialize` will append values to the
		internal buffer of this String. Once complete, the contents can be
		retrieved through a call to `this.toString`.

		Each Serializer instance maintains its own cache if this.useCache` is
		true.</haxe_doc>
		</new>
		<haxe_doc>The Serializer class can be used to encode values and objects into a String,
	from which the Unserializer class can recreate the original representation.

	This class can be used in two ways:

	- create a new Serializer() instance, call its serialize() method with
		any argument and finally retrieve the String representation from
		toString()
	- call Serializer.run() to obtain the serialized representation of a
		single argument

	Serialization is guaranteed to work for all haxe-defined classes, but may
	or may not work for instances of external/native classes.

	The specification of the serialization format can be found here:
	`http://haxe.org/manual/serialization/format`</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.Unserializer" params="" file="/opt/haxe/std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" line="60" static="1">
			<t path="haxe.TypeResolver"/>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a Class or Enum instance from a given String. By
		default, the haxe Type Api is used.

		A type resolver must provide two methods:

		1. resolveClass(name:String):Class<Dynamic> is called to determine a
				Class from a class name
		2. resolveEnum(name:String):Enum<Dynamic> is called to determine an
				Enum from an enum name

		This value is applied when a new Unserializer instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 line="62" static="1"><c path="String"/></BASE64>
		<run public="1" set="method" line="459" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its unserialize() method
		once.</haxe_doc>
		</run>
		<base_decode line="464" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<t path="haxe.io.BytesData"/>
</f></base_decode>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<upos><x path="Int"/></upos>
		<setResolver public="1" set="method" line="124">
			<f a="r">
				<t path="haxe.TypeResolver"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is null, a special resolver is used which returns null for all
		input values.

		See DEFAULT_RESOLVER for more information on type resolvers.</haxe_doc>
		</setResolver>
		<readDigits set="method" line="147"><f a=""><x path="Int"/></f></readDigits>
		<readFloat set="method" line="172"><f a=""><x path="Float"/></f></readFloat>
		<unserializeObject set="method" line="185"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum set="method" line="200"><f a="edecl:tag">
	<x path="Enum"><unknown/></x>
	<c path="String"/>
	<unknown/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="232">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from Type.createEmptyInstance, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="99">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc>The Unserializer class is the complement to the Serializer class. It parses
	a serialization String and creates objects from the contained data.

	This class can be used in two ways:

	- create a new Unserializer() instance with a given serialization
		String, then call its unserialize() method until all values are
		extracted
	- call Unserializer.run() to unserialize a single value from a given
		String</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/opt/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/opt/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="/opt/haxe/std/neko/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h><d/></h>
		<get public="1" set="method" line="36">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<keys public="1" set="method" line="48">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/opt/haxe/std/neko/_std/haxe/ds/ObjectMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<count line="27" static="1"><x path="Int"/></count>
		<h><a/></h>
		<k><a/></k>
		<get public="1" set="method" line="53">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<t path="Null"><c path="haxe.ds.ObjectMap.V"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<keys public="1" set="method" line="67">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="/opt/haxe/std/neko/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h><d/></h>
		<keys public="1" set="method" line="48">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="54">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="60">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/opt/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="neko.NativeArray"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/opt/haxe/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/opt/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
	<length public="1" get="null" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<toArray public="1" set="method" line="157" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="Array"><c path="haxe.ds.Vector.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
	</toArray>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="/opt/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
		<length public="1" get="null" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
		</length>
		<toArray public="1" set="method" line="157" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="Array"><c path="haxe.ds.Vector.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
		</toArray>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/opt/haxe/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="haxe.io.ArrayBufferViewImpl"/></typedef>
	<class path="haxe.io.ArrayBufferViewImpl" params="" file="/opt/haxe/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView">
		<bytes public="1"><c path="haxe.io.Bytes"/></bytes>
		<byteOffset public="1"><x path="Int"/></byteOffset>
		<byteLength public="1"><x path="Int"/></byteLength>
		<new public="1" set="method" line="9"><f a="bytes:pos:length">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/opt/haxe/std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/opt/haxe/std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView">
	<EMULATED public="1" get="accessor" set="null" static="1">
		<x path="Bool"/>
		<haxe_doc>On some platforms configurations (for instance JS with no TypedArray support as in IE8-), Haxe will
		try to emulate the array buffers API. However in that case memory sharing will not be supported :
		each typed array or will copy its own data set. This flag allows users to detect if we are doing such emulation.
		At the moment only JavaScript is concerned.</haxe_doc>
	</EMULATED>
	<buffer public="1" get="accessor" set="null" static="1">
		<c path="haxe.io.Bytes"/>
		<meta><m n=":impl"/></meta>
	</buffer>
	<byteOffset public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteOffset>
	<byteLength public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteLength>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io.Bytes" params="" file="/opt/haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="455" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</alloc>
		<ofData public="1" set="method" line="540" static="1">
			<f a="b">
				<t path="haxe.io.BytesData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</ofData>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<blit public="1" set="method" line="79">
			<f a="pos:src:srcpos:len">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</blit>
		<fill public="1" set="method" line="114"><f a="pos:len:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
		<sub public="1" set="method" line="133">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</sub>
		<new set="method" line="33"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/opt/haxe/std/haxe/io/BytesData.hx"><c path="neko.NativeString"/></typedef>
	<class path="haxe.io.Eof" params="" file="/opt/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="30">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<haxe_doc>This exception is raised when reading while data is no longer available in the [Input].</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="haxe.io.Error" params="" file="/opt/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="haxe.io.Int32ArrayData" params="" file="/opt/haxe/std/haxe/io/Int32Array.hx" module="haxe.io.Int32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Int32Array" params="" file="/opt/haxe/std/haxe/io/Int32Array.hx">
		<this><t path="haxe.io.Int32ArrayData"/></this>
		<impl><class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/opt/haxe/std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array">
	<length public="1" get="null" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="null" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<fromArray public="1" set="method" line="72" static="1"><f a="a:?pos:?length">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Int32Array"/>
</f></fromArray>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/opt/haxe/std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array">
		<length public="1" get="null" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="null" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<fromArray public="1" set="method" line="72" static="1"><f a="a:?pos:?length">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Int32Array"/>
</f></fromArray>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.macro.Position" params="" file="/opt/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.macro.Expr" params="" file="/opt/haxe/std/haxe/macro/Expr.hx"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/opt/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<typedef path="haxe.macro.Case" params="" file="/opt/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<guard>
		<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
		<meta><m n=":optional"/></meta>
	</guard>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Var" params="" file="/opt/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Catch" params="" file="/opt/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></typedef>
	<typedef path="haxe.macro.TypePath" params="" file="/opt/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub>
		<t path="Null"><t path="Null"><c path="String"/></t></t>
		<meta><m n=":optional"/></meta>
	</sub>
	<params>
		<t path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></t>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/opt/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<params>
		<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
	<constraints>
		<t path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></t>
		<meta><m n=":optional"/></meta>
	</constraints>
</a></typedef>
	<typedef path="haxe.macro.Function" params="" file="/opt/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<params>
		<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
		<meta><m n=":optional"/></meta>
	</params>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/opt/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value>
		<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
		<meta><m n=":optional"/></meta>
	</value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/opt/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<t path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></t>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/opt/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><c path="Array"><t path="haxe.macro.MetadataEntry"/></c></typedef>
	<typedef path="haxe.macro.Field" params="" file="/opt/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta>
		<t path="Null"><t path="haxe.macro.Metadata"/></t>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.FieldType"/></kind>
	<doc>
		<t path="Null"><t path="Null"><c path="String"/></t></t>
		<meta><m n=":optional"/></meta>
	</doc>
	<access>
		<t path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></t>
		<meta><m n=":optional"/></meta>
	</access>
</a></typedef>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/opt/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta>
		<t path="Null"><t path="haxe.macro.Metadata"/></t>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.TypeDefKind"/></kind>
	<isExtern>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</isExtern>
	<fields><c path="Array"><t path="haxe.macro.Field"/></c></fields>
</a></typedef>
	<typedef path="haxe.macro.ImportExpr" params="" file="/opt/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<path><c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c></path>
	<mode><e path="haxe.macro.ImportMode"/></mode>
</a></typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/opt/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<toString set="method"><f a=""><c path="String"/></f></toString>
	<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
</a></typedef>
	<typedef path="haxe.macro.AnonType" params="" file="/opt/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<status><e path="haxe.macro.AnonStatus"/></status>
	<fields><c path="Array"><t path="haxe.macro.ClassField"/></c></fields>
</a></typedef>
	<typedef path="haxe.macro.TypeParameter" params="" file="/opt/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.BaseType" params="" file="/opt/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/opt/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.FieldKind"/></kind>
	<isPublic><x path="Bool"/></isPublic>
	<expr set="method"><f a=""><t path="Null"><t path="haxe.macro.TypedExpr"/></t></f></expr>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/opt/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<superClass><t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t></superClass>
	<statics><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></statics>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<overrides><c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c></overrides>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.ClassKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c></interfaces>
	<init><t path="Null"><t path="haxe.macro.TypedExpr"/></t></init>
	<fields><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></fields>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructor><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t></constructor>
</a></typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/opt/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/opt/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<names><c path="Array"><c path="String"/></c></names>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructs><x path="Map">
	<c path="String"/>
	<t path="haxe.macro.EnumField"/>
</x></constructs>
</a></typedef>
	<typedef path="haxe.macro.DefType" params="" file="/opt/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/opt/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<unops><c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></unops>
	<type><e path="haxe.macro.Type"/></type>
	<to><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></to>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<impl><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t></impl>
	<from><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></from>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<binops><c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></binops>
	<array><c path="Array"><t path="haxe.macro.ClassField"/></c></array>
</a></typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/opt/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TVar" params="" file="/opt/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t set="null"><e path="haxe.macro.Type"/></t>
	<name set="null"><c path="String"/></name>
	<id set="null"><x path="Int"/></id>
	<extra set="null"><t path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.TypedExpr"/></t></expr>
</a></t></extra>
	<capture set="null"><x path="Bool"/></capture>
</a></typedef>
	<typedef path="haxe.macro.TFunc" params="" file="/opt/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
	<args><c path="Array"><a>
	<value><t path="Null"><e path="haxe.macro.TConstant"/></t></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c></args>
</a></typedef>
	<typedef path="haxe.macro.TypedExpr" params="" file="/opt/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.TypedExprDef"/></expr>
</a></typedef>
	<class path="neko.NativeArray" params="T" file="/opt/haxe/std/neko/NativeArray.hx"><meta><m n=":keep"/></meta></class>
	<class path="neko.NativeString" params="" file="/opt/haxe/std/neko/NativeString.hx"><meta><m n=":keep"/></meta></class>
	<enum path="neko.vm.ThreadHandle" params="" file="/opt/haxe/std/neko/vm/Thread.hx" module="neko.vm.Thread"><meta><m n=":flatEnum"/></meta></enum>
	<class path="neko.vm.Thread" params="" file="/opt/haxe/std/neko/vm/Thread.hx">
		<create public="1" set="method" line="53" static="1">
			<f a="callb">
				<f a=""><x path="Void"/></f>
				<c path="neko.vm.Thread"/>
			</f>
			<haxe_doc>Creates a new thread that will execute the [callb] function, then exit.</haxe_doc>
		</create>
		<thread_create line="129" static="1">
			<f a=":">
				<f a="_">
					<unknown/>
					<x path="Void"/>
				</f>
				<unknown/>
				<e path="neko.vm.ThreadHandle"/>
			</f>
			<haxe_doc><![CDATA[Starts an OS message loop after [osInitialize] has been done.
		In that state, the UI handled by this thread will be updated and
		[sync] calls can be performed. The loop returns when [exitLoop] is
		called for this thread.
	**
	public static function osLoop() {
		if( os_loop == null ) throw "Please call osInitialize() first";
		os_loop();
	}

	/**
		The function [f] will be called by this thread if it's in [osLoop].
		[sync] returns immediatly. See [osInitialize] remarks.
	**
	public function sync( f : Void -> Void ) {
		os_sync(handle,f);
	}

	/**
		The function [f] will be called by this thread and the calling thread
		will wait until the result is available then return its value.
	**
	public function syncResult<T>( f : Void -> T ) : T {
		if( this == current() )
			return f();
		var v = new neko.vm.Lock();
		var r = null;
		sync(function() {
			r = f();
			v.release();
		});
		v.wait();
		return r;
	}

	/**
		Exit from [osLoop].
	**
	public function exitLoop() {
		os_loop_stop(handle);
	}

	/**
		If you want to use the [osLoop], [sync] and [syncResult] methods, you
		need to call [osInitialize] before creating any thread or calling [current].
		This will load [os.ndll] library and initialize UI methods for each thread.
	**
	public static function osInitialize() {
		os_loop = neko.Lib.load("os","os_loop",0);
		os_loop_stop = neko.Lib.load("os","os_loop_stop",1);
		os_sync = neko.Lib.load("os","os_sync",2);
	}

	static var os_loop = null;
	static var os_loop_stop = null;
	static var os_sync = null;]]></haxe_doc>
		</thread_create>
		<handle><e path="neko.vm.ThreadHandle"/></handle>
		<__compare set="method" line="66">
			<f a="t">
				<a><handle set="null"><unknown/></handle></a>
				<unknown/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
		</__compare>
		<new set="method" line="31"><f a="h">
	<e path="neko.vm.ThreadHandle"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
</haxe>